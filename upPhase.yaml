apiVersion: haha
kind: note

=================MYSQL篇========================

1.mysql锁主动释放
show open tables where in_use > 0 ;

show processlist;

SELECT * FROM information_schema.INNODB_TRX;

SELECT * FROM information_schema.INNODB_LOCKs;

SELECT concat('KILL ',id,';')  FROM information_schema.processlist p  INNER JOIN  information_schema.INNODB_TRX x  ON p.id=x.trx_mysql_thread_id  WHERE db='db_device';

2.innodb和myisam存储引擎的区别
主要区别：是否支持事务  其次锁的粒度可以到行锁  后者是表级别的锁
所以主查询的场景可以考虑使用后者

3.索引分类（主键、唯一索引、全文索引、覆盖索引等等），最左前缀原则，哪些条件无法使用索引
记不住哪些场景会导致索引失效 可以使用explain查看索引是否使用到  一般是索引使用函数或者全表or之类的会失效

4.B树、B+树区别，索引为何使用B+树
前者子节点和叶子节点都会存储索引数据  但是后者只会在叶子节点上按照顺序存储元素信息 并形成链表的结构 同时指向下一个node
mysql使用后者，查询效率更高  也适用于范围查询

5. 聚集索引与非聚集索引（使用非聚集索引的查询过程）
聚集索引是逻辑顺序与落盘顺序保持一致的，非聚集索引则只有逻辑索引是顺序的，内容是通过指针指向过去的

6.事务隔离级别和各自存在的问题（脏读、不可重复读、幻读）和解决方式（间隙锁及MVCC）
默认级别会有幻读

7.乐观锁和悲观锁、行锁与表锁、共享锁与排他锁（inndob如何手动加共享锁与排他锁）
version控制乐观锁  共享lock share 排它for update 悲观所

8.数据库崩溃时事务的恢复机制（REDO日志和UNDO日志）
redo事务提交前的新数据备份 undo事务提交前的旧数据备份


=================REDIS篇========================

1.如何保证redis高并发及高可用
主从 哨兵 集群来解决
主从模式的缺点是master挂掉后，集群无法工作
哨兵模式的缺点是master写入的并发量受到限制
集群模式的缺点是资源维护以及高并发带来的key-value需要分片降低了性能

2.redis的持久化功能
redis的rdb和aof两种持久化 rdb通过save持久化 刷盘会造成阻塞
aof是通过缓冲区刷盘  然后再通过aof文件恢复

3.redis缓存雪崩、缓存穿透
雪崩是查询刚好到了过期时间 请求集中到db 穿透是redis没有 db没有 下一次就会一直查 一直没有

4.Redis与数据库MySQL的双写一致如何解决？
1.可以通过canal监听binlog的修改对redis进行更新
2.可以通过rocektmq消息进行更新

5.如果解决缓存穿透
本地设置一个默认值和有效时间  有值后填充进去


=================data struct和algorithm篇========================
1. 数组、链表（单向、双向、双端）、栈和队列、二叉树、红黑树、哈希表、堆（最大和最小）
数组：顺序存储  顺序寻址
链表

2. 个人经验：栈和队列、哈希表、链表、二叉树的题较多，图的较少

3. 查找：二分查找及其变形

4. 二叉树：前序、中序、后序遍历，按规定方式打印，两个节点之间操作（最近公共祖先、距离）等问题。

5. 最大堆和最小堆：大数量级数据找最大几个等问题、堆如何调整等问题。

6. 栈和队列：经常作为算法题要用到的数据结构

7. 八大排序：3个简单的：冒泡、选择、插入及其优化，5个高级的：快速排序、归并排序、堆排序、希尔排序、桶排序（快排、归并、堆很重要）

8.手写堆排序

9. 给阿里2万多名员工按年龄排序应该选择哪个算法？



